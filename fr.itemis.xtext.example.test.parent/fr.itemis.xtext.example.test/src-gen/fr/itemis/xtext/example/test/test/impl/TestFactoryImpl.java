/**
 * generated by Xtext 2.9.1
 */
package fr.itemis.xtext.example.test.test.impl;

import fr.itemis.xtext.example.test.test.*;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;

import org.eclipse.emf.ecore.impl.EFactoryImpl;

import org.eclipse.emf.ecore.plugin.EcorePlugin;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model <b>Factory</b>.
 * <!-- end-user-doc -->
 * @generated
 */
public class TestFactoryImpl extends EFactoryImpl implements TestFactory
{
  /**
   * Creates the default factory implementation.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public static TestFactory init()
  {
    try
    {
      TestFactory theTestFactory = (TestFactory)EPackage.Registry.INSTANCE.getEFactory(TestPackage.eNS_URI);
      if (theTestFactory != null)
      {
        return theTestFactory;
      }
    }
    catch (Exception exception)
    {
      EcorePlugin.INSTANCE.log(exception);
    }
    return new TestFactoryImpl();
  }

  /**
   * Creates an instance of the factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public TestFactoryImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EObject create(EClass eClass)
  {
    switch (eClass.getClassifierID())
    {
      case TestPackage.TGT_SCRIPT: return createTgtScript();
      case TestPackage.DECLARE_VARIABLE: return createDeclareVariable();
      case TestPackage.VARIABLE: return createVariable();
      case TestPackage.AFTER_SHELL: return createAfterShell();
      case TestPackage.STEP_SHELL: return createStepShell();
      case TestPackage.PRE_SHELL: return createPreShell();
      case TestPackage.TGT_STATEMENT: return createTgtStatement();
      case TestPackage.TGT_STEP: return createTgtStep();
      default:
        throw new IllegalArgumentException("The class '" + eClass.getName() + "' is not a valid classifier");
    }
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public TgtScript createTgtScript()
  {
    TgtScriptImpl tgtScript = new TgtScriptImpl();
    return tgtScript;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public DeclareVariable createDeclareVariable()
  {
    DeclareVariableImpl declareVariable = new DeclareVariableImpl();
    return declareVariable;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Variable createVariable()
  {
    VariableImpl variable = new VariableImpl();
    return variable;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public AfterShell createAfterShell()
  {
    AfterShellImpl afterShell = new AfterShellImpl();
    return afterShell;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public StepShell createStepShell()
  {
    StepShellImpl stepShell = new StepShellImpl();
    return stepShell;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public PreShell createPreShell()
  {
    PreShellImpl preShell = new PreShellImpl();
    return preShell;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public TgtStatement createTgtStatement()
  {
    TgtStatementImpl tgtStatement = new TgtStatementImpl();
    return tgtStatement;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public TgtStep createTgtStep()
  {
    TgtStepImpl tgtStep = new TgtStepImpl();
    return tgtStep;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public TestPackage getTestPackage()
  {
    return (TestPackage)getEPackage();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @deprecated
   * @generated
   */
  @Deprecated
  public static TestPackage getPackage()
  {
    return TestPackage.eINSTANCE;
  }

} //TestFactoryImpl
