/**
 * generated by Xtext 2.9.1
 */
package fr.itemis.xtext.example.test.test.impl;

import fr.itemis.xtext.example.test.test.AfterShell;
import fr.itemis.xtext.example.test.test.DeclareVariable;
import fr.itemis.xtext.example.test.test.PreShell;
import fr.itemis.xtext.example.test.test.StepShell;
import fr.itemis.xtext.example.test.test.TestPackage;
import fr.itemis.xtext.example.test.test.TgtScript;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Tgt Script</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link fr.itemis.xtext.example.test.test.impl.TgtScriptImpl#getPreShell <em>Pre Shell</em>}</li>
 *   <li>{@link fr.itemis.xtext.example.test.test.impl.TgtScriptImpl#getStepShell <em>Step Shell</em>}</li>
 *   <li>{@link fr.itemis.xtext.example.test.test.impl.TgtScriptImpl#getAfterShell <em>After Shell</em>}</li>
 *   <li>{@link fr.itemis.xtext.example.test.test.impl.TgtScriptImpl#getDeclareVariable <em>Declare Variable</em>}</li>
 * </ul>
 *
 * @generated
 */
public class TgtScriptImpl extends MinimalEObjectImpl.Container implements TgtScript
{
  /**
   * The cached value of the '{@link #getPreShell() <em>Pre Shell</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getPreShell()
   * @generated
   * @ordered
   */
  protected PreShell preShell;

  /**
   * The cached value of the '{@link #getStepShell() <em>Step Shell</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getStepShell()
   * @generated
   * @ordered
   */
  protected StepShell stepShell;

  /**
   * The cached value of the '{@link #getAfterShell() <em>After Shell</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getAfterShell()
   * @generated
   * @ordered
   */
  protected AfterShell afterShell;

  /**
   * The cached value of the '{@link #getDeclareVariable() <em>Declare Variable</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getDeclareVariable()
   * @generated
   * @ordered
   */
  protected DeclareVariable declareVariable;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected TgtScriptImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return TestPackage.Literals.TGT_SCRIPT;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public PreShell getPreShell()
  {
    return preShell;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetPreShell(PreShell newPreShell, NotificationChain msgs)
  {
    PreShell oldPreShell = preShell;
    preShell = newPreShell;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, TestPackage.TGT_SCRIPT__PRE_SHELL, oldPreShell, newPreShell);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setPreShell(PreShell newPreShell)
  {
    if (newPreShell != preShell)
    {
      NotificationChain msgs = null;
      if (preShell != null)
        msgs = ((InternalEObject)preShell).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - TestPackage.TGT_SCRIPT__PRE_SHELL, null, msgs);
      if (newPreShell != null)
        msgs = ((InternalEObject)newPreShell).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - TestPackage.TGT_SCRIPT__PRE_SHELL, null, msgs);
      msgs = basicSetPreShell(newPreShell, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, TestPackage.TGT_SCRIPT__PRE_SHELL, newPreShell, newPreShell));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public StepShell getStepShell()
  {
    return stepShell;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetStepShell(StepShell newStepShell, NotificationChain msgs)
  {
    StepShell oldStepShell = stepShell;
    stepShell = newStepShell;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, TestPackage.TGT_SCRIPT__STEP_SHELL, oldStepShell, newStepShell);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setStepShell(StepShell newStepShell)
  {
    if (newStepShell != stepShell)
    {
      NotificationChain msgs = null;
      if (stepShell != null)
        msgs = ((InternalEObject)stepShell).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - TestPackage.TGT_SCRIPT__STEP_SHELL, null, msgs);
      if (newStepShell != null)
        msgs = ((InternalEObject)newStepShell).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - TestPackage.TGT_SCRIPT__STEP_SHELL, null, msgs);
      msgs = basicSetStepShell(newStepShell, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, TestPackage.TGT_SCRIPT__STEP_SHELL, newStepShell, newStepShell));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public AfterShell getAfterShell()
  {
    return afterShell;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetAfterShell(AfterShell newAfterShell, NotificationChain msgs)
  {
    AfterShell oldAfterShell = afterShell;
    afterShell = newAfterShell;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, TestPackage.TGT_SCRIPT__AFTER_SHELL, oldAfterShell, newAfterShell);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setAfterShell(AfterShell newAfterShell)
  {
    if (newAfterShell != afterShell)
    {
      NotificationChain msgs = null;
      if (afterShell != null)
        msgs = ((InternalEObject)afterShell).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - TestPackage.TGT_SCRIPT__AFTER_SHELL, null, msgs);
      if (newAfterShell != null)
        msgs = ((InternalEObject)newAfterShell).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - TestPackage.TGT_SCRIPT__AFTER_SHELL, null, msgs);
      msgs = basicSetAfterShell(newAfterShell, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, TestPackage.TGT_SCRIPT__AFTER_SHELL, newAfterShell, newAfterShell));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public DeclareVariable getDeclareVariable()
  {
    return declareVariable;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetDeclareVariable(DeclareVariable newDeclareVariable, NotificationChain msgs)
  {
    DeclareVariable oldDeclareVariable = declareVariable;
    declareVariable = newDeclareVariable;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, TestPackage.TGT_SCRIPT__DECLARE_VARIABLE, oldDeclareVariable, newDeclareVariable);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setDeclareVariable(DeclareVariable newDeclareVariable)
  {
    if (newDeclareVariable != declareVariable)
    {
      NotificationChain msgs = null;
      if (declareVariable != null)
        msgs = ((InternalEObject)declareVariable).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - TestPackage.TGT_SCRIPT__DECLARE_VARIABLE, null, msgs);
      if (newDeclareVariable != null)
        msgs = ((InternalEObject)newDeclareVariable).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - TestPackage.TGT_SCRIPT__DECLARE_VARIABLE, null, msgs);
      msgs = basicSetDeclareVariable(newDeclareVariable, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, TestPackage.TGT_SCRIPT__DECLARE_VARIABLE, newDeclareVariable, newDeclareVariable));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case TestPackage.TGT_SCRIPT__PRE_SHELL:
        return basicSetPreShell(null, msgs);
      case TestPackage.TGT_SCRIPT__STEP_SHELL:
        return basicSetStepShell(null, msgs);
      case TestPackage.TGT_SCRIPT__AFTER_SHELL:
        return basicSetAfterShell(null, msgs);
      case TestPackage.TGT_SCRIPT__DECLARE_VARIABLE:
        return basicSetDeclareVariable(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case TestPackage.TGT_SCRIPT__PRE_SHELL:
        return getPreShell();
      case TestPackage.TGT_SCRIPT__STEP_SHELL:
        return getStepShell();
      case TestPackage.TGT_SCRIPT__AFTER_SHELL:
        return getAfterShell();
      case TestPackage.TGT_SCRIPT__DECLARE_VARIABLE:
        return getDeclareVariable();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case TestPackage.TGT_SCRIPT__PRE_SHELL:
        setPreShell((PreShell)newValue);
        return;
      case TestPackage.TGT_SCRIPT__STEP_SHELL:
        setStepShell((StepShell)newValue);
        return;
      case TestPackage.TGT_SCRIPT__AFTER_SHELL:
        setAfterShell((AfterShell)newValue);
        return;
      case TestPackage.TGT_SCRIPT__DECLARE_VARIABLE:
        setDeclareVariable((DeclareVariable)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case TestPackage.TGT_SCRIPT__PRE_SHELL:
        setPreShell((PreShell)null);
        return;
      case TestPackage.TGT_SCRIPT__STEP_SHELL:
        setStepShell((StepShell)null);
        return;
      case TestPackage.TGT_SCRIPT__AFTER_SHELL:
        setAfterShell((AfterShell)null);
        return;
      case TestPackage.TGT_SCRIPT__DECLARE_VARIABLE:
        setDeclareVariable((DeclareVariable)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case TestPackage.TGT_SCRIPT__PRE_SHELL:
        return preShell != null;
      case TestPackage.TGT_SCRIPT__STEP_SHELL:
        return stepShell != null;
      case TestPackage.TGT_SCRIPT__AFTER_SHELL:
        return afterShell != null;
      case TestPackage.TGT_SCRIPT__DECLARE_VARIABLE:
        return declareVariable != null;
    }
    return super.eIsSet(featureID);
  }

} //TgtScriptImpl
